{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","value","setValue","useEffect","editor","EditorJS","autofocus","placeholder","holder","tools","header","Header","list","List","onChange","save","then","outputValue","val","v","JSON","stringify","console","log","window","parent","postMessage","message","type","addEventListener","e","data","isReady","blocks","parse","render","className","style","background","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2QAoFeA,MA9Ef,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,KAmEd,OA9CAC,qBAAU,WAET,IAAMC,EAAS,IAAIC,IAAS,CAI3BC,WAAW,EACXC,YAAa,4BACbC,OAAQ,WACRC,MAAO,CACNC,OAAQC,IACRC,KAAMC,KAEPC,SAAU,WAETV,EAAOW,OAAOC,MAAK,SAAAC,GAClB,IAlCkBC,EAkCZC,EAAIC,KAAKC,UAAUJ,IAlCPC,EAmCLC,KAjCJlB,IAEZqB,QAAQC,IAAI,gBAAiBtB,EAAOiB,GAEpChB,EAASgB,GACLM,OAAOC,QACVH,QAAQC,IAAI,gCACZC,OAAOC,OAAOC,YAAY,CACzBC,QAAST,EACTU,KAAM,8BACJ,MAEHN,QAAQC,IAAI,0CA8BbC,OAAOK,iBAAiB,WAAW,SAAUC,GAC5CR,QAAQC,IAAI,cAAeO,EAAEC,MAET,kCAAhBD,EAAEC,KAAKH,OACVN,QAAQC,IAAI,YAAaO,EAAEC,KAAKJ,SAC5B1B,IAAU6B,EAAEC,KAAKJ,UACpBzB,EAAS4B,EAAEC,KAAKJ,SAEhBvB,EAAO4B,QAAQhB,MAAK,WACnBM,QAAQC,IAAI,gCACZ,IAAMU,EAASb,KAAKc,MAAMJ,EAAEC,KAAKJ,SACjCvB,EAAO+B,OAAOF,WAIf,KAED,IAIF,qBAAKG,UAAU,YAAYC,MAAO,CAACC,WAAY,WAA/C,SAEC,qBAAKC,GAAG,gBChEIC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASb,OACP,cAAC,IAAMc,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.b7daf734.chunk.js","sourcesContent":["\nimport React, { useState, useEffect } from \"react\"\nimport EditorJS from '@editorjs/editorjs';\nimport Header from '@editorjs/header';\nimport List from '@editorjs/list';\n\nfunction App() {\n\tconst [value, setValue] = useState(\"\")\n\n\tconst valueChanged = (val) => {\n\n\t\tif (val === value) return\n\n\t\tconsole.log(\"Value changed\", value, val)\n\n\t\tsetValue(val)\n\t\tif (window.parent) {\n\t\t\tconsole.log(\"posting message to parent...\")\n\t\t\twindow.parent.postMessage({\n\t\t\t\tmessage: val,\n\t\t\t\ttype: 'setNewValueFromCustomField'\n\t\t\t}, \"*\")\n\t\t} else {\n\t\t\tconsole.log(\"can't post message to parent :(\")\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\n\t\tconst editor = new EditorJS({\n\t\t\t/**\n\t\t\t * Id of Element that should contain Editor instance\n\t\t\t */\n\t\t\tautofocus: true,\n\t\t\tplaceholder: \"Enter your Rich Text here\",\n\t\t\tholder: 'editorjs',\n\t\t\ttools: {\n\t\t\t\theader: Header,\n\t\t\t\tlist: List,\n\t\t\t},\n\t\t\tonChange: () => {\n\n\t\t\t\teditor.save().then(outputValue => {\n\t\t\t\t\tconst v = JSON.stringify(outputValue)\n\t\t\t\t\tvalueChanged(v)\n\t\t\t\t})\n\n\t\t\t}\n\n\t\t});\n\n\n\n\t\twindow.addEventListener(\"message\", function (e) {\n\t\t\tconsole.log(\"Got message\", e.data)\n\t\t\t//only care about these messages\n\t\t\tif (e.data.type === 'setInitialValueForCustomField') {\n\t\t\t\tconsole.log(\"GOT VALUE\", e.data.message)\n\t\t\t\tif (value !== e.data.message) {\n\t\t\t\t\tsetValue(e.data.message)\n\n\t\t\t\t\teditor.isReady.then(() => {\n\t\t\t\t\t\tconsole.log(\"Editor Ready - setting value\")\n\t\t\t\t\t\tconst blocks = JSON.parse(e.data.message)\n\t\t\t\t\t\teditor.render(blocks)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}, false);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\n\n\treturn (\n\t\t<div className=\"field-row\" style={{background: \"#ebebeb\"}}>\n\n\t\t\t<div id=\"editorjs\">\n\n\t\t\t</div>\n\t\t</div>\n\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}