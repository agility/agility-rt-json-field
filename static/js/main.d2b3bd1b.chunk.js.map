{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","value","setValue","height","setHeight","containerRef","useRef","heightChanged","h","window","parent","postMessage","message","type","useEffect","tools","embed","Embed","table","Table","paragraph","Paragraph","list","List","warning","Warning","code","Code","image","class","Image","config","uploader","uploadByFile","file","a","success","url","uploadByUrl","console","warn","raw","Raw","header","Header","quote","Quote","marker","Marker","checklist","CheckList","delimiter","Delimiter","inlineCode","InlineCode","simpleImage","SimpleImage","editor","EditorJS","autofocus","placeholder","holder","onChange","save","then","outputValue","val","v","JSON","stringify","log","current","offsetHeight","addEventListener","e","data","isReady","blocks","parse","render","setTimeout","style","background","padding","id","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"6uBAsLeA,MA9Jf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEcF,mBAAS,KAFvB,mBAEPG,EAFO,KAECC,EAFD,KAGRC,EAAeC,mBAEfC,EAAgB,SAACC,GAClBA,IAAML,IAEVC,EAAUI,GAENC,OAAOC,QACVD,OAAOC,OAAOC,YAAY,CACzBC,QAASJ,EACTK,KAAM,wBACJ,OAsIL,OA9GAC,qBAAU,WAIT,IAAMC,EAAQ,CACbC,MAAOC,IACPC,MAAOC,IACPC,UAAWC,IACXC,KAAMC,IACNC,QAASC,IACTC,KAAMC,IAENC,MAAO,CACNC,MAAOC,IACPC,OAAQ,CAIPC,SAAU,CAMTC,aAAa,WAAD,4BAAE,WAAOC,GAAP,SAAAC,EAAA,4DAGE,OACGD,EAJL,kBASN,CACNE,QAAS,EACTF,KAAM,CACJG,IAAK,6CAZK,2CAAF,mDAAC,GAuBbC,YA7BS,SA6BGD,GAEPE,SAASA,QAAQC,KAAK,mCAAoCH,OAKlEI,IAAKC,IACLC,OAAQC,IACRC,MAAOC,IACPC,OAAQC,IACRC,UAAWC,IACXC,UAAWC,IACXC,WAAYC,IACZC,YAAaC,KAIRC,EAAS,IAAIC,IAAS,CAI3BC,WAAW,EACXC,YAAa,4BACbC,OAAQ,WACR9C,QACA+C,SAAU,WAETL,EAAOM,OAAOC,MAAK,SAAAC,GAClB,IA/FkBC,EA+FZC,EAAIC,KAAKC,UAAUJ,IA/FPC,EAgGLC,KA9FJlE,IAEZC,EAASgE,GACLzD,OAAOC,QACV6B,QAAQ+B,IAAI,gCACZ7D,OAAOC,OAAOC,YAAY,CACzBC,QAASsD,EACTrD,KAAM,8BACJ,MAEH0B,QAAQ+B,IAAI,oCAqFV/D,EAAcF,EAAakE,QAAQC,oBAQtC/D,OAAOgE,iBAAiB,WAAW,SAAUC,GAAI,IAAD,OAG3B,kCAAhBA,EAAEC,KAAK9D,MACNZ,IAAUyE,EAAEC,KAAK/D,UACpBV,EAASwE,EAAEC,KAAK/D,SAEhB6C,EAAOmB,QAAQZ,MAAK,WAEnB,IAAMa,EAAST,KAAKU,MAAMJ,EAAEC,KAAK/D,SACjC6C,EAAOsB,OAAOF,GACd,EAAKG,YAAW,WACfzE,EAAcF,EAAakE,QAAQC,gBACjC,YAKJ,KAGD,IAIF,qBAAKS,MAAO,CAAEC,WAAY,OAAQC,QAAS,UAA3C,SACC,qBAAKC,GAAG,WAAWC,IAAKhF,OClKZiF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASf,OACP,cAAC,IAAMgB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.d2b3bd1b.chunk.js","sourcesContent":["\nimport React, { useState, useEffect, useRef } from \"react\"\nimport EditorJS from '@editorjs/editorjs'\n\nimport agilityMgmt from \"@agility/content-management\";\n\nimport Embed from '@editorjs/embed'\nimport Table from '@editorjs/table'\nimport Paragraph from '@editorjs/paragraph'\nimport List from '@editorjs/list'\nimport Warning from '@editorjs/warning'\nimport Code from '@editorjs/code'\n\nimport Image from '@editorjs/image'\nimport Raw from '@editorjs/raw'\nimport Header from '@editorjs/header'\nimport Quote from '@editorjs/quote'\nimport Marker from '@editorjs/marker'\nimport CheckList from '@editorjs/checklist'\nimport Delimiter from '@editorjs/delimiter'\nimport InlineCode from '@editorjs/inline-code'\nimport SimpleImage from '@editorjs/simple-image'\n\n\nfunction App() {\n\tconst [value, setValue] = useState(\"\")\n\tconst [height, setHeight] = useState(500)\n\tconst containerRef = useRef()\n\n\tconst heightChanged = (h) => {\n\t\tif (h === height) return\n\n\t\tsetHeight(h)\n\n\t\tif (window.parent) {\n\t\t\twindow.parent.postMessage({\n\t\t\t\tmessage: h,\n\t\t\t\ttype: 'setHeightCustomField'\n\t\t\t}, \"*\")\n\t\t}\n\n\t}\n\n\tconst valueChanged = (val) => {\n\n\t\tif (val === value) return\n\n\t\tsetValue(val)\n\t\tif (window.parent) {\n\t\t\tconsole.log(\"posting message to parent...\")\n\t\t\twindow.parent.postMessage({\n\t\t\t\tmessage: val,\n\t\t\t\ttype: 'setNewValueFromCustomField'\n\t\t\t}, \"*\")\n\t\t} else {\n\t\t\tconsole.log(\"can't post message to parent :(\")\n\t\t}\n\t}\n\n\n\n\n\tuseEffect(() => {\n\n\n\n\t\tconst tools = {\n\t\t\tembed: Embed,\n\t\t\ttable: Table,\n\t\t\tparagraph: Paragraph,\n\t\t\tlist: List,\n\t\t\twarning: Warning,\n\t\t\tcode: Code,\n\t\t\t//linkTool: LinkTool,\n\t\t\timage: {\n\t\t\t\tclass: Image,\n\t\t\t\tconfig: {\n\t\t\t\t\t/**\n\t\t\t\t\t * Custom uploader\n\t\t\t\t\t */\n\t\t\t\t\tuploader: {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Upload file to the server and return an uploaded image data\n\t\t\t\t\t\t * @param {File} file - file selected from the device or pasted by drag-n-drop\n\t\t\t\t\t\t * @return {Promise.<{success, file: {url}}>}\n\t\t\t\t\t\t */\n\t\t\t\t\t\tuploadByFile: async (file) => {\n\t\t\t\t\t\t\t// your own uploading logic here\n\t\t\t\t\t\t\t//let fileName = `${new Date().toISOString().replace(/\\./g, \"\").replace(/:/g, \"\")}-${file.name}`;\n\t\t\t\t\t\t\tlet fileName = \"file\"\n\t\t\t\t\t\t\tlet fileContent = file\n\n\n\t\t\t\t\t\t\t//TODO: save the image somewhere...\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tsuccess: 1,\n\t\t\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t\t  url: 'https://via.placeholder.com/700x300.png',\n\t\t\t\t\t\t\t\t  // any other image data you want to store, such as width, height, color, extension, etc\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Send URL-string to the server. Backend should load image by this URL and return an uploaded image data\n\t\t\t\t\t\t * @param {string} url - pasted image URL\n\t\t\t\t\t\t * @return {Promise.<{success, file: {url}}>}\n\t\t\t\t\t\t */\n\t\t\t\t\t\tuploadByUrl(url) {\n\t\t\t\t\t\t\t// your ajax request for uploading\n\t\t\t\t\t\t\tif (console) console.warn(\"URL uploads not supported yet...\", url)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\traw: Raw,\n\t\t\theader: Header,\n\t\t\tquote: Quote,\n\t\t\tmarker: Marker,\n\t\t\tchecklist: CheckList,\n\t\t\tdelimiter: Delimiter,\n\t\t\tinlineCode: InlineCode,\n\t\t\tsimpleImage: SimpleImage\n\t\t}\n\n\n\t\tconst editor = new EditorJS({\n\t\t\t/**\n\t\t\t * Id of Element that should contain Editor instance\n\t\t\t */\n\t\t\tautofocus: true,\n\t\t\tplaceholder: \"Enter your Rich Text here\",\n\t\t\tholder: 'editorjs',\n\t\t\ttools,\n\t\t\tonChange: () => {\n\n\t\t\t\teditor.save().then(outputValue => {\n\t\t\t\t\tconst v = JSON.stringify(outputValue)\n\t\t\t\t\tvalueChanged(v)\n\t\t\t\t\theightChanged(containerRef.current.offsetHeight)\n\n\t\t\t\t})\n\n\t\t\t},\n\n\t\t});\n\n\t\twindow.addEventListener(\"message\", function (e) {\n\n\t\t\t//only care about these messages\n\t\t\tif (e.data.type === 'setInitialValueForCustomField') {\n\t\t\t\tif (value !== e.data.message) {\n\t\t\t\t\tsetValue(e.data.message)\n\n\t\t\t\t\teditor.isReady.then(() => {\n\t\t\t\t\t\t//wait for the editor to be ready...\n\t\t\t\t\t\tconst blocks = JSON.parse(e.data.message)\n\t\t\t\t\t\teditor.render(blocks)\n\t\t\t\t\t\tthis.setTimeout(function () {\n\t\t\t\t\t\t\theightChanged(containerRef.current.offsetHeight)\n\t\t\t\t\t\t}, 200)\n\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}, false);\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\n\n\treturn (\n\t\t<div style={{ background: \"#fff\", padding: '0 10px' }}>\n\t\t\t<div id=\"editorjs\" ref={containerRef}>\n\n\t\t\t</div>\n\t\t</div>\n\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}