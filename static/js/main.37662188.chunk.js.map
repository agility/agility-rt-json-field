{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","value","setValue","useEffect","editor","EditorJS","holder","onChange","save","then","outputValue","v","JSON","stringify","console","log","onReady","blocks","parse","render","window","addEventListener","e","data","type","message","className","val","target","parent","postMessage","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2OA0FeA,MArFf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,KAuEd,OArDAC,qBAAU,WAET,IAAMC,EAAS,IAAIC,IAAS,CAI3BC,OAAQ,WAQLC,SAAU,WAETH,EAAOI,OAAOC,MAAK,SAAAC,GAClB,IAAMC,EAAIC,KAAKC,UAAUH,GACzBI,QAAQC,IAAI,cAAgBJ,OAIhCK,QAAS,WAGR,GAFAF,QAAQC,IAAI,SAERd,EAAO,CAEV,IAAMgB,EAASL,KAAKM,MAAMjB,GAC1BG,EAAOe,OAAOF,OAUlBG,OAAOC,iBAAiB,WAAW,SAAUC,GAC5CR,QAAQC,IAAI,cAAeO,EAAEC,MAEV,kCAAhBD,EAAEC,KAAKC,OACTV,QAAQC,IAAI,YAAaO,EAAEC,KAAKE,SAC5BxB,IAAUqB,EAAEC,KAAKE,SACpBvB,EAASoB,EAAEC,KAAKE,aAIhB,KAED,IAIF,sBAAKC,UAAU,YAAf,UACC,6CACA,uBAAOF,KAAK,OAAOvB,MAAOA,EAAOM,SAAU,SAACe,GAvEzB,IAACK,KAuE2CL,EAAEM,OAAO3B,SArE7DA,IAEZa,QAAQC,IAAI,gBAAiBd,EAAO0B,GAEpCzB,EAASyB,GACLP,OAAOS,QACVT,OAAOS,OAAOC,YAAY,CACzBL,QAASE,EACTH,KAAM,8BACJ,YA+DH,qBAAKO,GAAG,iBCtEIC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASrB,OACP,cAAC,IAAMsB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.37662188.chunk.js","sourcesContent":["\nimport React, { useState, useEffect } from \"react\"\nimport EditorJS from '@editorjs/editorjs';\n\n\nfunction App() {\n\tconst [value, setValue] = useState(\"\")\n\n\tconst valueChanged = (val) => {\n\n\t\tif (val === value) return\n\n\t\tconsole.log(\"Value changed\", value, val)\n\n\t\tsetValue(val)\n\t\tif (window.parent) {\n\t\t\twindow.parent.postMessage({\n\t\t\t\tmessage: val,\n\t\t\t\ttype: 'setNewValueFromCustomField'\n\t\t\t}, \"*\")\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\n\t\tconst editor = new EditorJS({\n\t\t\t/**\n\t\t\t * Id of Element that should contain Editor instance\n\t\t\t */\n\t\t\tholder: 'editorjs',\n\n\t\t\t//  tools: {\n\t\t\t//  \theader: {\n\t\t\t//  \t  class: \"Header\",\n\t\t\t//  \t  inlineToolbar : true\n\t\t\t//  \t},\n\t\t\t//    },\n\t\t\t   onChange: () => {\n\n\t\t\t\t   editor.save().then(outputValue => {\n\t\t\t\t\t   const v = JSON.stringify(outputValue)\n\t\t\t\t\t   console.log(\"Saved Value\",  v)\n\t\t\t\t   })\n\n\t\t\t\t},\n\t\t\t\tonReady: () => {\n\t\t\t\t\tconsole.log(\"READY\")\n\n\t\t\t\t\tif (value) {\n\n\t\t\t\t\t\tconst blocks = JSON.parse(value)\n\t\t\t\t\t\teditor.render(blocks)\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t  });\n\n\n\n\t\twindow.addEventListener(\"message\", function (e) {\n\t\t\tconsole.log(\"Got message\", e.data)\n\t\t\t//only care about these messages\n\t\t\tif(e.data.type === 'setInitialValueForCustomField') {\n\t\t\t\tconsole.log(\"GOT VALUE\", e.data.message)\n\t\t\t\tif (value !== e.data.message) {\n\t\t\t\t\tsetValue(e.data.message)\n\n\t\t\t\t}\n\t\t\t}\n\t\t}, false);\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\n\n\treturn (\n\t\t<div className=\"field-row\">\n\t\t\t<label>Content:\n\t\t\t<input type=\"text\" value={value} onChange={(e) => valueChanged(e.target.value)} />\n\t\t\t</label>\n\n\t\t\t<div id=\"editorjs\">\n\n\t\t\t</div>\n\t\t</div>\n\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}