{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","value","setValue","useEffect","window","addEventListener","e","console","log","data","type","message","className","onChange","val","target","parent","postMessage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMA8CeA,MA3Cf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,KAiCd,OAfAC,qBAAU,WACTC,OAAOC,iBAAiB,WAAW,SAAUC,GAC5CC,QAAQC,IAAI,cAAeF,EAAEG,MAEV,kCAAhBH,EAAEG,KAAKC,OACTH,QAAQC,IAAI,YAAaF,EAAEG,KAAKE,SAC5BV,IAAUK,EAAEG,KAAKE,SACpBT,EAASI,EAAEG,KAAKE,aAGhB,KAED,IAIF,qBAAKC,UAAU,YAAf,SACC,6CACA,uBAAOF,KAAK,OAAOT,MAAOA,EAAOY,SAAU,SAACP,GAjCzB,IAACQ,KAiC2CR,EAAES,OAAOd,SA/B7DA,IAEZM,QAAQC,IAAI,gBAAiBP,EAAOa,GAEpCZ,EAASY,GACLV,OAAOY,QACVZ,OAAOY,OAAOC,YAAY,CACzBN,QAASG,EACTJ,KAAM,8BACJ,eCLSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.744f6c06.chunk.js","sourcesContent":["\nimport React, { useState, useEffect } from \"react\"\n\nfunction App() {\n\tconst [value, setValue] = useState(\"\")\n\n\tconst valueChanged = (val) => {\n\n\t\tif (val === value) return\n\n\t\tconsole.log(\"Value changed\", value, val)\n\n\t\tsetValue(val)\n\t\tif (window.parent) {\n\t\t\twindow.parent.postMessage({\n\t\t\t\tmessage: val,\n\t\t\t\ttype: 'setNewValueFromCustomField'\n\t\t\t}, \"*\")\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"message\", function (e) {\n\t\t\tconsole.log(\"Got message\", e.data)\n\t\t\t//only care about these messages\n\t\t\tif(e.data.type === 'setInitialValueForCustomField') {\n\t\t\t\tconsole.log(\"GOT VALUE\", e.data.message)\n\t\t\t\tif (value !== e.data.message) {\n\t\t\t\t\tsetValue(e.data.message)\n\t\t\t\t}\n\t\t\t}\n\t\t}, false);\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\n\n\treturn (\n\t\t<div className=\"field-row\">\n\t\t\t<label>Content:\n\t\t\t<input type=\"text\" value={value} onChange={(e) => valueChanged(e.target.value)} />\n\t\t\t</label>\n\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}